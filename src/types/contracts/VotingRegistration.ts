/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IRegistration {
  export type RegistrationParamsStruct = {
    remark: string;
    commitmentStart: BigNumberish;
    commitmentPeriod: BigNumberish;
  };

  export type RegistrationParamsStructOutput = [
    string,
    BigNumber,
    BigNumber
  ] & {
    remark: string;
    commitmentStart: BigNumber;
    commitmentPeriod: BigNumber;
  };

  export type RegistrationValuesStruct = {
    commitmentStartTime: BigNumberish;
    commitmentEndTime: BigNumberish;
  };

  export type RegistrationValuesStructOutput = [BigNumber, BigNumber] & {
    commitmentStartTime: BigNumber;
    commitmentEndTime: BigNumber;
  };

  export type RegistrationCountersStruct = { totalRegistrations: BigNumberish };

  export type RegistrationCountersStructOutput = [BigNumber] & {
    totalRegistrations: BigNumber;
  };

  export type RegistrationInfoStruct = {
    remark: string;
    values: IRegistration.RegistrationValuesStruct;
    counters: IRegistration.RegistrationCountersStruct;
  };

  export type RegistrationInfoStructOutput = [
    string,
    IRegistration.RegistrationValuesStructOutput,
    IRegistration.RegistrationCountersStructOutput
  ] & {
    remark: string;
    values: IRegistration.RegistrationValuesStructOutput;
    counters: IRegistration.RegistrationCountersStructOutput;
  };
}

export declare namespace ILightweightState {
  export type StatesMerkleDataStruct = {
    issuerId: BigNumberish;
    issuerState: BigNumberish;
    createdAtTimestamp: BigNumberish;
    merkleProof: BytesLike[];
  };

  export type StatesMerkleDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    issuerId: BigNumber;
    issuerState: BigNumber;
    createdAtTimestamp: BigNumber;
    merkleProof: string[];
  };

  export type GistRootDataStruct = {
    root: BigNumberish;
    createdAtTimestamp: BigNumberish;
  };

  export type GistRootDataStructOutput = [BigNumber, BigNumber] & {
    root: BigNumber;
    createdAtTimestamp: BigNumber;
  };
}

export declare namespace IBaseVerifier {
  export type ProveIdentityParamsStruct = {
    statesMerkleData: ILightweightState.StatesMerkleDataStruct;
    inputs: BigNumberish[];
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
  };

  export type ProveIdentityParamsStructOutput = [
    ILightweightState.StatesMerkleDataStructOutput,
    BigNumber[],
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber]
  ] & {
    statesMerkleData: ILightweightState.StatesMerkleDataStructOutput;
    inputs: BigNumber[];
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
  };

  export type TransitStateParamsStruct = {
    newIdentitiesStatesRoot: BytesLike;
    gistData: ILightweightState.GistRootDataStruct;
    proof: BytesLike;
  };

  export type TransitStateParamsStructOutput = [
    string,
    ILightweightState.GistRootDataStructOutput,
    string
  ] & {
    newIdentitiesStatesRoot: string;
    gistData: ILightweightState.GistRootDataStructOutput;
    proof: string;
  };
}

export declare namespace IRegisterVerifier {
  export type RegisterProofParamsStruct = {
    issuingAuthority: BigNumberish;
    documentNullifier: BigNumberish;
    commitment: BytesLike;
  };

  export type RegisterProofParamsStructOutput = [
    BigNumber,
    BigNumber,
    string
  ] & {
    issuingAuthority: BigNumber;
    documentNullifier: BigNumber;
    commitment: string;
  };
}

export declare namespace SparseMerkleTree {
  export type NodeStruct = {
    nodeType: BigNumberish;
    childLeft: BigNumberish;
    childRight: BigNumberish;
    nodeHash: BytesLike;
    key: BytesLike;
    value: BytesLike;
  };

  export type NodeStructOutput = [
    number,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    nodeType: number;
    childLeft: BigNumber;
    childRight: BigNumber;
    nodeHash: string;
    key: string;
    value: string;
  };

  export type ProofStruct = {
    root: BytesLike;
    siblings: BytesLike[];
    existence: boolean;
    key: BytesLike;
    value: BytesLike;
    auxExistence: boolean;
    auxKey: BytesLike;
    auxValue: BytesLike;
  };

  export type ProofStructOutput = [
    string,
    string[],
    boolean,
    string,
    string,
    boolean,
    string,
    string
  ] & {
    root: string;
    siblings: string[];
    existence: boolean;
    key: string;
    value: string;
    auxExistence: boolean;
    auxKey: string;
    auxValue: string;
  };
}

export interface VotingRegistrationInterface extends utils.Interface {
  functions: {
    "__Registration_init((string,uint256,uint256))": FunctionFragment;
    "commitments(bytes32)": FunctionFragment;
    "getNodeByKey(bytes32)": FunctionFragment;
    "getProof(bytes32)": FunctionFragment;
    "getRegistrationInfo()": FunctionFragment;
    "getRegistrationStatus()": FunctionFragment;
    "getRoot()": FunctionFragment;
    "isRootExists(bytes32)": FunctionFragment;
    "register(((uint256,uint256,uint256,bytes32[]),uint256[],uint256[2],uint256[2][2],uint256[2]),(uint256,uint256,bytes32),(bytes32,(uint256,uint256),bytes),bool)": FunctionFragment;
    "registerVerifier()": FunctionFragment;
    "registrationInfo()": FunctionFragment;
    "rootsHistory(bytes32)": FunctionFragment;
    "smtTreeMaxDepth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__Registration_init"
      | "commitments"
      | "getNodeByKey"
      | "getProof"
      | "getRegistrationInfo"
      | "getRegistrationStatus"
      | "getRoot"
      | "isRootExists"
      | "register"
      | "registerVerifier"
      | "registrationInfo"
      | "rootsHistory"
      | "smtTreeMaxDepth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Registration_init",
    values: [IRegistration.RegistrationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNodeByKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getProof", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRegistrationInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrationStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRootExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      IBaseVerifier.ProveIdentityParamsStruct,
      IRegisterVerifier.RegisterProofParamsStruct,
      IBaseVerifier.TransitStateParamsStruct,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rootsHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "smtTreeMaxDepth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "__Registration_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodeByKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProof", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRootExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rootsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smtTreeMaxDepth",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "RegistrationInitialized(address,(string,uint256,uint256))": EventFragment;
    "UserRegistered(address,((uint256,uint256,uint256,bytes32[]),uint256[],uint256[2],uint256[2][2],uint256[2]),(uint256,uint256,bytes32))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrationInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistered"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RegistrationInitializedEventObject {
  proposer: string;
  registrationParams: IRegistration.RegistrationParamsStructOutput;
}
export type RegistrationInitializedEvent = TypedEvent<
  [string, IRegistration.RegistrationParamsStructOutput],
  RegistrationInitializedEventObject
>;

export type RegistrationInitializedEventFilter =
  TypedEventFilter<RegistrationInitializedEvent>;

export interface UserRegisteredEventObject {
  user: string;
  proveIdentityParams: IBaseVerifier.ProveIdentityParamsStructOutput;
  registerProofParams: IRegisterVerifier.RegisterProofParamsStructOutput;
}
export type UserRegisteredEvent = TypedEvent<
  [
    string,
    IBaseVerifier.ProveIdentityParamsStructOutput,
    IRegisterVerifier.RegisterProofParamsStructOutput
  ],
  UserRegisteredEventObject
>;

export type UserRegisteredEventFilter = TypedEventFilter<UserRegisteredEvent>;

export interface VotingRegistration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingRegistrationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Registration_init(
      registrationParams_: IRegistration.RegistrationParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    getNodeByKey(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[SparseMerkleTree.NodeStructOutput]>;

    getProof(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[SparseMerkleTree.ProofStructOutput]>;

    getRegistrationInfo(
      overrides?: CallOverrides
    ): Promise<[IRegistration.RegistrationInfoStructOutput]>;

    getRegistrationStatus(overrides?: CallOverrides): Promise<[number]>;

    getRoot(overrides?: CallOverrides): Promise<[string]>;

    isRootExists(
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    register(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofParams_: IRegisterVerifier.RegisterProofParamsStruct,
      transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
      isTransitState_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerVerifier(overrides?: CallOverrides): Promise<[string]>;

    registrationInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        IRegistration.RegistrationValuesStructOutput,
        IRegistration.RegistrationCountersStructOutput
      ] & {
        remark: string;
        values: IRegistration.RegistrationValuesStructOutput;
        counters: IRegistration.RegistrationCountersStructOutput;
      }
    >;

    rootsHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    smtTreeMaxDepth(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  __Registration_init(
    registrationParams_: IRegistration.RegistrationParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  getNodeByKey(
    key_: BytesLike,
    overrides?: CallOverrides
  ): Promise<SparseMerkleTree.NodeStructOutput>;

  getProof(
    key_: BytesLike,
    overrides?: CallOverrides
  ): Promise<SparseMerkleTree.ProofStructOutput>;

  getRegistrationInfo(
    overrides?: CallOverrides
  ): Promise<IRegistration.RegistrationInfoStructOutput>;

  getRegistrationStatus(overrides?: CallOverrides): Promise<number>;

  getRoot(overrides?: CallOverrides): Promise<string>;

  isRootExists(root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  register(
    proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
    registerProofParams_: IRegisterVerifier.RegisterProofParamsStruct,
    transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
    isTransitState_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerVerifier(overrides?: CallOverrides): Promise<string>;

  registrationInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      IRegistration.RegistrationValuesStructOutput,
      IRegistration.RegistrationCountersStructOutput
    ] & {
      remark: string;
      values: IRegistration.RegistrationValuesStructOutput;
      counters: IRegistration.RegistrationCountersStructOutput;
    }
  >;

  rootsHistory(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  smtTreeMaxDepth(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    __Registration_init(
      registrationParams_: IRegistration.RegistrationParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getNodeByKey(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<SparseMerkleTree.NodeStructOutput>;

    getProof(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<SparseMerkleTree.ProofStructOutput>;

    getRegistrationInfo(
      overrides?: CallOverrides
    ): Promise<IRegistration.RegistrationInfoStructOutput>;

    getRegistrationStatus(overrides?: CallOverrides): Promise<number>;

    getRoot(overrides?: CallOverrides): Promise<string>;

    isRootExists(root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    register(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofParams_: IRegisterVerifier.RegisterProofParamsStruct,
      transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
      isTransitState_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVerifier(overrides?: CallOverrides): Promise<string>;

    registrationInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        IRegistration.RegistrationValuesStructOutput,
        IRegistration.RegistrationCountersStructOutput
      ] & {
        remark: string;
        values: IRegistration.RegistrationValuesStructOutput;
        counters: IRegistration.RegistrationCountersStructOutput;
      }
    >;

    rootsHistory(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    smtTreeMaxDepth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RegistrationInitialized(address,(string,uint256,uint256))"(
      proposer?: string | null,
      registrationParams?: null
    ): RegistrationInitializedEventFilter;
    RegistrationInitialized(
      proposer?: string | null,
      registrationParams?: null
    ): RegistrationInitializedEventFilter;

    "UserRegistered(address,((uint256,uint256,uint256,bytes32[]),uint256[],uint256[2],uint256[2][2],uint256[2]),(uint256,uint256,bytes32))"(
      user?: string | null,
      proveIdentityParams?: null,
      registerProofParams?: null
    ): UserRegisteredEventFilter;
    UserRegistered(
      user?: string | null,
      proveIdentityParams?: null,
      registerProofParams?: null
    ): UserRegisteredEventFilter;
  };

  estimateGas: {
    __Registration_init(
      registrationParams_: IRegistration.RegistrationParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getNodeByKey(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProof(key_: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getRegistrationInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getRegistrationStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getRoot(overrides?: CallOverrides): Promise<BigNumber>;

    isRootExists(
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofParams_: IRegisterVerifier.RegisterProofParamsStruct,
      transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
      isTransitState_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    registrationInfo(overrides?: CallOverrides): Promise<BigNumber>;

    rootsHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    smtTreeMaxDepth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    __Registration_init(
      registrationParams_: IRegistration.RegistrationParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeByKey(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProof(
      key_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistrationInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistrationStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRootExists(
      root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofParams_: IRegisterVerifier.RegisterProofParamsStruct,
      transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
      isTransitState_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registrationInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootsHistory(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    smtTreeMaxDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
