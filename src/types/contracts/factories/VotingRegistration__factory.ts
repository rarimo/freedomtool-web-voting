/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  VotingRegistration,
  VotingRegistrationInterface,
} from "../VotingRegistration";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "registerVerifier_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "treeHeight_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "remark",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "commitmentStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "commitmentPeriod",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct IRegistration.RegistrationParams",
        name: "registrationParams",
        type: "tuple",
      },
    ],
    name: "RegistrationInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "issuerId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "issuerState",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "createdAtTimestamp",
                type: "uint256",
              },
              {
                internalType: "bytes32[]",
                name: "merkleProof",
                type: "bytes32[]",
              },
            ],
            internalType: "struct ILightweightState.StatesMerkleData",
            name: "statesMerkleData",
            type: "tuple",
          },
          {
            internalType: "uint256[]",
            name: "inputs",
            type: "uint256[]",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
        ],
        indexed: false,
        internalType: "struct IBaseVerifier.ProveIdentityParams",
        name: "proveIdentityParams",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "issuingAuthority",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "documentNullifier",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct IRegisterVerifier.RegisterProofParams",
        name: "registerProofParams",
        type: "tuple",
      },
    ],
    name: "UserRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "remark",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "commitmentStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "commitmentPeriod",
            type: "uint256",
          },
        ],
        internalType: "struct IRegistration.RegistrationParams",
        name: "registrationParams_",
        type: "tuple",
      },
    ],
    name: "__Registration_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key_",
        type: "bytes32",
      },
    ],
    name: "getNodeByKey",
    outputs: [
      {
        components: [
          {
            internalType: "enum SparseMerkleTree.NodeType",
            name: "nodeType",
            type: "uint8",
          },
          {
            internalType: "uint64",
            name: "childLeft",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "childRight",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "nodeHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "value",
            type: "bytes32",
          },
        ],
        internalType: "struct SparseMerkleTree.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key_",
        type: "bytes32",
      },
    ],
    name: "getProof",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "root",
            type: "bytes32",
          },
          {
            internalType: "bytes32[]",
            name: "siblings",
            type: "bytes32[]",
          },
          {
            internalType: "bool",
            name: "existence",
            type: "bool",
          },
          {
            internalType: "bytes32",
            name: "key",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "value",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "auxExistence",
            type: "bool",
          },
          {
            internalType: "bytes32",
            name: "auxKey",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "auxValue",
            type: "bytes32",
          },
        ],
        internalType: "struct SparseMerkleTree.Proof",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRegistrationInfo",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "remark",
            type: "string",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "commitmentStartTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "commitmentEndTime",
                type: "uint256",
              },
            ],
            internalType: "struct IRegistration.RegistrationValues",
            name: "values",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "totalRegistrations",
                type: "uint256",
              },
            ],
            internalType: "struct IRegistration.RegistrationCounters",
            name: "counters",
            type: "tuple",
          },
        ],
        internalType: "struct IRegistration.RegistrationInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRegistrationStatus",
    outputs: [
      {
        internalType: "enum IRegistration.RegistrationStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
    ],
    name: "isRootExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "documentNullifier_",
        type: "uint256",
      },
    ],
    name: "isUserRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "issuerId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "issuerState",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "createdAtTimestamp",
                type: "uint256",
              },
              {
                internalType: "bytes32[]",
                name: "merkleProof",
                type: "bytes32[]",
              },
            ],
            internalType: "struct ILightweightState.StatesMerkleData",
            name: "statesMerkleData",
            type: "tuple",
          },
          {
            internalType: "uint256[]",
            name: "inputs",
            type: "uint256[]",
          },
          {
            internalType: "uint256[2]",
            name: "a",
            type: "uint256[2]",
          },
          {
            internalType: "uint256[2][2]",
            name: "b",
            type: "uint256[2][2]",
          },
          {
            internalType: "uint256[2]",
            name: "c",
            type: "uint256[2]",
          },
        ],
        internalType: "struct IBaseVerifier.ProveIdentityParams",
        name: "proveIdentityParams_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "issuingAuthority",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "documentNullifier",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "commitment",
            type: "bytes32",
          },
        ],
        internalType: "struct IRegisterVerifier.RegisterProofParams",
        name: "registerProofParams_",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "newIdentitiesStatesRoot",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "root",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "createdAtTimestamp",
                type: "uint256",
              },
            ],
            internalType: "struct ILightweightState.GistRootData",
            name: "gistData",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "proof",
            type: "bytes",
          },
        ],
        internalType: "struct IBaseVerifier.TransitStateParams",
        name: "transitStateParams_",
        type: "tuple",
      },
      {
        internalType: "bool",
        name: "isTransitState_",
        type: "bool",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registerVerifier",
    outputs: [
      {
        internalType: "contract IRegisterVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registrationInfo",
    outputs: [
      {
        internalType: "string",
        name: "remark",
        type: "string",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "commitmentStartTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "commitmentEndTime",
            type: "uint256",
          },
        ],
        internalType: "struct IRegistration.RegistrationValues",
        name: "values",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "totalRegistrations",
            type: "uint256",
          },
        ],
        internalType: "struct IRegistration.RegistrationCounters",
        name: "counters",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "rootsHistory",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "smtTreeMaxDepth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class VotingRegistration__factory {
  static readonly abi = _abi;
  static createInterface(): VotingRegistrationInterface {
    return new utils.Interface(_abi) as VotingRegistrationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VotingRegistration {
    return new Contract(address, _abi, signerOrProvider) as VotingRegistration;
  }
}
