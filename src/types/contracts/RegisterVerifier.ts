/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IRegisterVerifier {
  export type RegisterProofParamsStruct = {
    issuingAuthority: BigNumberish;
    documentNullifier: BigNumberish;
    commitment: BytesLike;
  };

  export type RegisterProofParamsStructOutput = [
    BigNumber,
    BigNumber,
    string
  ] & {
    issuingAuthority: BigNumber;
    documentNullifier: BigNumber;
    commitment: string;
  };

  export type RegisterProofInfoStruct = {
    registerProofParams: IRegisterVerifier.RegisterProofParamsStruct;
    registrationContractAddress: string;
  };

  export type RegisterProofInfoStructOutput = [
    IRegisterVerifier.RegisterProofParamsStructOutput,
    string
  ] & {
    registerProofParams: IRegisterVerifier.RegisterProofParamsStructOutput;
    registrationContractAddress: string;
  };
}

export declare namespace ILightweightState {
  export type StatesMerkleDataStruct = {
    issuerId: BigNumberish;
    issuerState: BigNumberish;
    createdAtTimestamp: BigNumberish;
    merkleProof: BytesLike[];
  };

  export type StatesMerkleDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    issuerId: BigNumber;
    issuerState: BigNumber;
    createdAtTimestamp: BigNumber;
    merkleProof: string[];
  };

  export type GistRootDataStruct = {
    root: BigNumberish;
    createdAtTimestamp: BigNumberish;
  };

  export type GistRootDataStructOutput = [BigNumber, BigNumber] & {
    root: BigNumber;
    createdAtTimestamp: BigNumber;
  };
}

export declare namespace IBaseVerifier {
  export type ProveIdentityParamsStruct = {
    statesMerkleData: ILightweightState.StatesMerkleDataStruct;
    inputs: BigNumberish[];
    a: [BigNumberish, BigNumberish];
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    c: [BigNumberish, BigNumberish];
  };

  export type ProveIdentityParamsStructOutput = [
    ILightweightState.StatesMerkleDataStructOutput,
    BigNumber[],
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber]
  ] & {
    statesMerkleData: ILightweightState.StatesMerkleDataStructOutput;
    inputs: BigNumber[];
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
  };

  export type TransitStateParamsStruct = {
    newIdentitiesStatesRoot: BytesLike;
    gistData: ILightweightState.GistRootDataStruct;
    proof: BytesLike;
  };

  export type TransitStateParamsStructOutput = [
    string,
    ILightweightState.GistRootDataStructOutput,
    string
  ] & {
    newIdentitiesStatesRoot: string;
    gistData: ILightweightState.GistRootDataStructOutput;
    proof: string;
  };
}

export interface RegisterVerifierInterface extends utils.Interface {
  functions: {
    "REGISTER_PROOF_QUERY_ID()": FunctionFragment;
    "__RegisterVerifier_init(address,uint256[],uint256[])": FunctionFragment;
    "countIssuingAuthorityBlacklist()": FunctionFragment;
    "countIssuingAuthorityWhitelist()": FunctionFragment;
    "getAllowedIssuers(uint256)": FunctionFragment;
    "getRegisterProofInfo(address,uint256)": FunctionFragment;
    "isAllowedIssuer(uint256,uint256)": FunctionFragment;
    "isIdentityRegistered(address,uint256)": FunctionFragment;
    "isIssuingAuthorityBlacklisted(uint256)": FunctionFragment;
    "isIssuingAuthorityWhitelisted(uint256)": FunctionFragment;
    "listIssuingAuthorityBlacklist(uint256,uint256)": FunctionFragment;
    "listIssuingAuthorityWhitelist(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "proveRegistration(((uint256,uint256,uint256,bytes32[]),uint256[],uint256[2],uint256[2][2],uint256[2]),((uint256,uint256,bytes32),address))": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setZKPQueriesStorage(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transitStateAndProveRegistration(((uint256,uint256,uint256,bytes32[]),uint256[],uint256[2],uint256[2][2],uint256[2]),((uint256,uint256,bytes32),address),(bytes32,(uint256,uint256),bytes))": FunctionFragment;
    "updateAllowedIssuers(uint256,uint256[],bool)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "zkpQueriesStorage()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REGISTER_PROOF_QUERY_ID"
      | "__RegisterVerifier_init"
      | "countIssuingAuthorityBlacklist"
      | "countIssuingAuthorityWhitelist"
      | "getAllowedIssuers"
      | "getRegisterProofInfo"
      | "isAllowedIssuer"
      | "isIdentityRegistered"
      | "isIssuingAuthorityBlacklisted"
      | "isIssuingAuthorityWhitelisted"
      | "listIssuingAuthorityBlacklist"
      | "listIssuingAuthorityWhitelist"
      | "owner"
      | "proveRegistration"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setZKPQueriesStorage"
      | "transferOwnership"
      | "transitStateAndProveRegistration"
      | "updateAllowedIssuers"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "zkpQueriesStorage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REGISTER_PROOF_QUERY_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__RegisterVerifier_init",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "countIssuingAuthorityBlacklist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countIssuingAuthorityWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedIssuers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisterProofInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowedIssuer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isIdentityRegistered",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuingAuthorityBlacklisted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuingAuthorityWhitelisted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listIssuingAuthorityBlacklist",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listIssuingAuthorityWhitelist",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proveRegistration",
    values: [
      IBaseVerifier.ProveIdentityParamsStruct,
      IRegisterVerifier.RegisterProofInfoStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setZKPQueriesStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transitStateAndProveRegistration",
    values: [
      IBaseVerifier.ProveIdentityParamsStruct,
      IRegisterVerifier.RegisterProofInfoStruct,
      IBaseVerifier.TransitStateParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllowedIssuers",
    values: [BigNumberish, BigNumberish[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "zkpQueriesStorage",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "REGISTER_PROOF_QUERY_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__RegisterVerifier_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countIssuingAuthorityBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countIssuingAuthorityWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisterProofInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIdentityRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIssuingAuthorityBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isIssuingAuthorityWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listIssuingAuthorityBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listIssuingAuthorityWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZKPQueriesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitStateAndProveRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllowedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zkpQueriesStorage",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegisterAccepted(uint256,((uint256,uint256,bytes32),address))": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RegisterAcceptedEventObject {
  documentNullifier: BigNumber;
  registerProofInfo: IRegisterVerifier.RegisterProofInfoStructOutput;
}
export type RegisterAcceptedEvent = TypedEvent<
  [BigNumber, IRegisterVerifier.RegisterProofInfoStructOutput],
  RegisterAcceptedEventObject
>;

export type RegisterAcceptedEventFilter =
  TypedEventFilter<RegisterAcceptedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface RegisterVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegisterVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REGISTER_PROOF_QUERY_ID(overrides?: CallOverrides): Promise<[string]>;

    __RegisterVerifier_init(
      zkpQueriesStorage_: string,
      issuingAuthorityWhitelist_: BigNumberish[],
      issuingAuthorityBlacklist_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    countIssuingAuthorityBlacklist(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countIssuingAuthorityWhitelist(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllowedIssuers(
      schema_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRegisterProofInfo(
      registrationContract_: string,
      documentNullifier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IRegisterVerifier.RegisterProofInfoStructOutput]>;

    isAllowedIssuer(
      schema_: BigNumberish,
      issuerId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIdentityRegistered(
      registrationContract_: string,
      documentNullifier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIssuingAuthorityBlacklisted(
      issuingAuthority_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isIssuingAuthorityWhitelisted(
      issuingAuthority_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listIssuingAuthorityBlacklist(
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    listIssuingAuthorityWhitelist(
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proveRegistration(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setZKPQueriesStorage(
      newZKPQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transitStateAndProveRegistration(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
      transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateAllowedIssuers(
      schema_: BigNumberish,
      issuerIds_: BigNumberish[],
      isAdding_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    zkpQueriesStorage(overrides?: CallOverrides): Promise<[string]>;
  };

  REGISTER_PROOF_QUERY_ID(overrides?: CallOverrides): Promise<string>;

  __RegisterVerifier_init(
    zkpQueriesStorage_: string,
    issuingAuthorityWhitelist_: BigNumberish[],
    issuingAuthorityBlacklist_: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  countIssuingAuthorityBlacklist(overrides?: CallOverrides): Promise<BigNumber>;

  countIssuingAuthorityWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

  getAllowedIssuers(
    schema_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRegisterProofInfo(
    registrationContract_: string,
    documentNullifier_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IRegisterVerifier.RegisterProofInfoStructOutput>;

  isAllowedIssuer(
    schema_: BigNumberish,
    issuerId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIdentityRegistered(
    registrationContract_: string,
    documentNullifier_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIssuingAuthorityBlacklisted(
    issuingAuthority_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isIssuingAuthorityWhitelisted(
    issuingAuthority_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listIssuingAuthorityBlacklist(
    offset_: BigNumberish,
    limit_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  listIssuingAuthorityWhitelist(
    offset_: BigNumberish,
    limit_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  proveRegistration(
    proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
    registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setZKPQueriesStorage(
    newZKPQueriesStorage_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transitStateAndProveRegistration(
    proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
    registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
    transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateAllowedIssuers(
    schema_: BigNumberish,
    issuerIds_: BigNumberish[],
    isAdding_: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  zkpQueriesStorage(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    REGISTER_PROOF_QUERY_ID(overrides?: CallOverrides): Promise<string>;

    __RegisterVerifier_init(
      zkpQueriesStorage_: string,
      issuingAuthorityWhitelist_: BigNumberish[],
      issuingAuthorityBlacklist_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    countIssuingAuthorityBlacklist(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countIssuingAuthorityWhitelist(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowedIssuers(
      schema_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRegisterProofInfo(
      registrationContract_: string,
      documentNullifier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IRegisterVerifier.RegisterProofInfoStructOutput>;

    isAllowedIssuer(
      schema_: BigNumberish,
      issuerId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIdentityRegistered(
      registrationContract_: string,
      documentNullifier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIssuingAuthorityBlacklisted(
      issuingAuthority_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isIssuingAuthorityWhitelisted(
      issuingAuthority_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listIssuingAuthorityBlacklist(
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    listIssuingAuthorityWhitelist(
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    proveRegistration(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setZKPQueriesStorage(
      newZKPQueriesStorage_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transitStateAndProveRegistration(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
      transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllowedIssuers(
      schema_: BigNumberish,
      issuerIds_: BigNumberish[],
      isAdding_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    zkpQueriesStorage(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RegisterAccepted(uint256,((uint256,uint256,bytes32),address))"(
      documentNullifier?: null,
      registerProofInfo?: null
    ): RegisterAcceptedEventFilter;
    RegisterAccepted(
      documentNullifier?: null,
      registerProofInfo?: null
    ): RegisterAcceptedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    REGISTER_PROOF_QUERY_ID(overrides?: CallOverrides): Promise<BigNumber>;

    __RegisterVerifier_init(
      zkpQueriesStorage_: string,
      issuingAuthorityWhitelist_: BigNumberish[],
      issuingAuthorityBlacklist_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    countIssuingAuthorityBlacklist(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countIssuingAuthorityWhitelist(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowedIssuers(
      schema_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisterProofInfo(
      registrationContract_: string,
      documentNullifier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllowedIssuer(
      schema_: BigNumberish,
      issuerId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIdentityRegistered(
      registrationContract_: string,
      documentNullifier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIssuingAuthorityBlacklisted(
      issuingAuthority_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isIssuingAuthorityWhitelisted(
      issuingAuthority_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listIssuingAuthorityBlacklist(
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listIssuingAuthorityWhitelist(
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proveRegistration(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setZKPQueriesStorage(
      newZKPQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transitStateAndProveRegistration(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
      transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateAllowedIssuers(
      schema_: BigNumberish,
      issuerIds_: BigNumberish[],
      isAdding_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    zkpQueriesStorage(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    REGISTER_PROOF_QUERY_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __RegisterVerifier_init(
      zkpQueriesStorage_: string,
      issuingAuthorityWhitelist_: BigNumberish[],
      issuingAuthorityBlacklist_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    countIssuingAuthorityBlacklist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countIssuingAuthorityWhitelist(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowedIssuers(
      schema_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisterProofInfo(
      registrationContract_: string,
      documentNullifier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllowedIssuer(
      schema_: BigNumberish,
      issuerId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIdentityRegistered(
      registrationContract_: string,
      documentNullifier_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIssuingAuthorityBlacklisted(
      issuingAuthority_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isIssuingAuthorityWhitelisted(
      issuingAuthority_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listIssuingAuthorityBlacklist(
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listIssuingAuthorityWhitelist(
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveRegistration(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setZKPQueriesStorage(
      newZKPQueriesStorage_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transitStateAndProveRegistration(
      proveIdentityParams_: IBaseVerifier.ProveIdentityParamsStruct,
      registerProofInfo_: IRegisterVerifier.RegisterProofInfoStruct,
      transitStateParams_: IBaseVerifier.TransitStateParamsStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateAllowedIssuers(
      schema_: BigNumberish,
      issuerIds_: BigNumberish[],
      isAdding_: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    zkpQueriesStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
