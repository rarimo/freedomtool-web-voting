/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface VotingRegistryInterface extends utils.Interface {
  functions: {
    "__VotingRegistry_init(address)": FunctionFragment;
    "addProxyPool(string,address,address)": FunctionFragment;
    "bindVotingToRegistration(address,address,address)": FunctionFragment;
    "getPoolImplementation(string)": FunctionFragment;
    "getVotingForRegistration(address,address)": FunctionFragment;
    "isPoolExistByProposer(address,address)": FunctionFragment;
    "isPoolExistByProposerAndType(address,string,address)": FunctionFragment;
    "isPoolExistByType(string,address)": FunctionFragment;
    "listPoolsByProposer(address,uint256,uint256)": FunctionFragment;
    "listPoolsByProposerAndType(address,string,uint256,uint256)": FunctionFragment;
    "listPoolsByType(string,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolCountByProposer(address)": FunctionFragment;
    "poolCountByProposerAndType(address,string)": FunctionFragment;
    "poolCountByType(string)": FunctionFragment;
    "poolFactory()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNewImplementations(string[],address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__VotingRegistry_init"
      | "addProxyPool"
      | "bindVotingToRegistration"
      | "getPoolImplementation"
      | "getVotingForRegistration"
      | "isPoolExistByProposer"
      | "isPoolExistByProposerAndType"
      | "isPoolExistByType"
      | "listPoolsByProposer"
      | "listPoolsByProposerAndType"
      | "listPoolsByType"
      | "owner"
      | "poolCountByProposer"
      | "poolCountByProposerAndType"
      | "poolCountByType"
      | "poolFactory"
      | "proxiableUUID"
      | "renounceOwnership"
      | "setNewImplementations"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__VotingRegistry_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addProxyPool",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bindVotingToRegistration",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingForRegistration",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolExistByProposer",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolExistByProposerAndType",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolExistByType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listPoolsByProposer",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listPoolsByProposerAndType",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listPoolsByType",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolCountByProposer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolCountByProposerAndType",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolCountByType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNewImplementations",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "__VotingRegistry_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProxyPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bindVotingToRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingForRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolExistByProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolExistByProposerAndType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolExistByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPoolsByProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPoolsByProposerAndType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPoolsByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolCountByProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCountByProposerAndType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCountByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewImplementations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface VotingRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __VotingRegistry_init(
      poolFactory_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addProxyPool(
      poolType_: string,
      proposer_: string,
      pool_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    bindVotingToRegistration(
      proposer_: string,
      voting_: string,
      registration_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPoolImplementation(
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVotingForRegistration(
      proposer_: string,
      registration_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isPoolExistByProposer(
      proposer_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolExistByProposerAndType(
      proposer_: string,
      poolType_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPoolExistByType(
      poolType_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listPoolsByProposer(
      proposer_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools_: string[] }>;

    listPoolsByProposerAndType(
      proposer_: string,
      poolType_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools_: string[] }>;

    listPoolsByType(
      poolType_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools_: string[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolCountByProposer(
      proposer_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolCountByProposerAndType(
      proposer_: string,
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolCountByType(
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolFactory(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setNewImplementations(
      poolTypes_: string[],
      newImplementations_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  __VotingRegistry_init(
    poolFactory_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addProxyPool(
    poolType_: string,
    proposer_: string,
    pool_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  bindVotingToRegistration(
    proposer_: string,
    voting_: string,
    registration_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPoolImplementation(
    poolType_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getVotingForRegistration(
    proposer_: string,
    registration_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isPoolExistByProposer(
    proposer_: string,
    pool_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolExistByProposerAndType(
    proposer_: string,
    poolType_: string,
    pool_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPoolExistByType(
    poolType_: string,
    pool_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listPoolsByProposer(
    proposer_: string,
    offset_: BigNumberish,
    limit_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listPoolsByProposerAndType(
    proposer_: string,
    poolType_: string,
    offset_: BigNumberish,
    limit_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listPoolsByType(
    poolType_: string,
    offset_: BigNumberish,
    limit_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolCountByProposer(
    proposer_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolCountByProposerAndType(
    proposer_: string,
    poolType_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolCountByType(
    poolType_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolFactory(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setNewImplementations(
    poolTypes_: string[],
    newImplementations_: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    __VotingRegistry_init(
      poolFactory_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addProxyPool(
      poolType_: string,
      proposer_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bindVotingToRegistration(
      proposer_: string,
      voting_: string,
      registration_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPoolImplementation(
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getVotingForRegistration(
      proposer_: string,
      registration_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isPoolExistByProposer(
      proposer_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolExistByProposerAndType(
      proposer_: string,
      poolType_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPoolExistByType(
      poolType_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listPoolsByProposer(
      proposer_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listPoolsByProposerAndType(
      proposer_: string,
      poolType_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listPoolsByType(
      poolType_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolCountByProposer(
      proposer_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCountByProposerAndType(
      proposer_: string,
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCountByType(
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNewImplementations(
      poolTypes_: string[],
      newImplementations_: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    __VotingRegistry_init(
      poolFactory_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addProxyPool(
      poolType_: string,
      proposer_: string,
      pool_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    bindVotingToRegistration(
      proposer_: string,
      voting_: string,
      registration_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPoolImplementation(
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingForRegistration(
      proposer_: string,
      registration_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolExistByProposer(
      proposer_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolExistByProposerAndType(
      proposer_: string,
      poolType_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPoolExistByType(
      poolType_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPoolsByProposer(
      proposer_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPoolsByProposerAndType(
      proposer_: string,
      poolType_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPoolsByType(
      poolType_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolCountByProposer(
      proposer_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCountByProposerAndType(
      proposer_: string,
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCountByType(
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolFactory(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setNewImplementations(
      poolTypes_: string[],
      newImplementations_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __VotingRegistry_init(
      poolFactory_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addProxyPool(
      poolType_: string,
      proposer_: string,
      pool_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bindVotingToRegistration(
      proposer_: string,
      voting_: string,
      registration_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPoolImplementation(
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingForRegistration(
      proposer_: string,
      registration_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolExistByProposer(
      proposer_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolExistByProposerAndType(
      proposer_: string,
      poolType_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolExistByType(
      poolType_: string,
      pool_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPoolsByProposer(
      proposer_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPoolsByProposerAndType(
      proposer_: string,
      poolType_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPoolsByType(
      poolType_: string,
      offset_: BigNumberish,
      limit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCountByProposer(
      proposer_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCountByProposerAndType(
      proposer_: string,
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCountByType(
      poolType_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setNewImplementations(
      poolTypes_: string[],
      newImplementations_: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
